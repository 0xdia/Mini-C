PARSER_BEGIN(minic)

public class minic {

  public static void main(String args[]) throws ParseException {
    minic parser = new minic(System.in);

    try {
      SimpleNode n = parser.Function();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

}

PARSER_END(minic)

/** Lexical analyzer **/

SKIP: { " " | "\r" | "\n" | "\r\n" }

TOKEN : { < INT : "int" > 
        | < FLOAT: "float" >
        }

TOKEN : { < IF : "if" > 
        | < ELSE: "else" >
        | < WHILE: "while" >
        | < FOR: "for" >
        }

TOKEN : { < ID : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])* > 
        | < NUMBER: (["0"-"9"])*["."](["0"-"9"])+ | (["0"-"9"])+ >
        }

TOKEN : { < EQUAL : "==" > 
        | < GREATER: ">" >
        | < LOWER: "<" >
        | < GREATEQ: ">=" >
        | < LOWEREQ: "<=" >
        | < NOTEQ: "!=" >
        }
        
TOKEN : { < COMMA : "," > 
        | < SEMIC: ";" >
        | < OPCUR: "{" >
        | < CLCUR: "}" >
        | < OPPAR: "(" >
        | < CLPAR: ")" >
        }

TOKEN : { < PLUS : "+" > 
        | < MINUS: "-" >
        | < MULT: "*" >
        | < DIV: "/" >
        }


/** Root production. */
SimpleNode Function() :
{}
{
  Type() <ID> <OPPAR> ArgList() <CLPAR> CompoundStmt() <EOF>
  { return jjtThis; }
}

void ArgList():
{}
{
    Arg() _ArgList()
}

void _ArgList():
{}
{
    <COMMA> Arg() _ArgList() | {}
}

void Arg():
{}
{
    Type() <ID>
}

void Declaration():
{}
{
    Type() IdentList() <SEMIC>
}

void Type():
{}
{
    <INT> | <FLOAT>
}

void IdentList():
{}
{
    <ID> _OrIdentList()
}

void _OrIdentList():
{}
{
    <COMMA> IdentList() | {}
}

void Stmt():
{}
{
    ForStmt() 
    | WhileStmt() 
    | Expr() <SEMIC> 
    | IfStmt() 
    | CompoundStmt() 
    | Declaration() 
    | <SEMIC> 
}

void ForStmt():
{}
{
    <FOR> <OPPAR> Expr() <SEMIC> OptExpr() <SEMIC> OptExpr() <CLPAR> Stmt()
}

void OptExpr():
{}
{
    Expr() | {}
}

void WhileStmt():
{}
{
    <WHILE> <OPPAR> Expr() <CLPAR> Stmt()
}

void IfStmt():
{}
{
    <IF> <OPPAR> Expr() <CLPAR> Stmt() ElsePart()
}

void ElsePart():
{}
{
    <ELSE> Stmt() | {}
}

void CompoundStmt():
{}
{
    <OPCUR> StmtList() <CLCUR>
}

void StmtList():
{}
{
    _StmtList()
}

void _StmtList():
{}
{
    Stmt() _StmtList() | {}
}

void Expr():
{}
{   
    LOOKAHEAD(2)
    <ID> Expr() | Rvalue()
}

void Rvalue():
{}
{
    Mag() _Rvalue()
}

void _Rvalue():
{}
{
    Compare() Mag() _Rvalue() | {}
}

void Compare():
{}
{
    <EQUAL> | <LOWER> | <GREATER> | <LOWEREQ> | <GREATEQ> | <NOTEQ>
}

void Mag():
{}
{
    Term() _Mag()
}

void _Mag():
{}
{
    <PLUS> Term() _Mag() | <MINUS> Term() _Mag() | {} 
}

void Term():
{}
{
    Factor() _Term()
}

void _Term():
{}
{
    <MULT> Factor() _Term() |
    <DIV>  Factor() _Term() |
    {}
}

void Factor():
{}
{
    <OPPAR> Expr() <CLPAR> |
    <PLUS> Expr()          |
    <MINUS> Expr()         |
    <ID>                   |
    <NUMBER>
}
