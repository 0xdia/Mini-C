PARSER_BEGIN(MiniC)

public class MiniC {

    public static void main(String args[]) {
        MiniC parser = new MiniC(System.in);
        try {
            SimpleNode n = parser.Function();
            n.dump("");
            System.out.println("Thank you.");
        }
        catch (Exception e) {
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}

PARSER_END(MiniC)

/** Lexical analyzer **/

TOKEN_MGR_DECLS : {
    static String tmp_id;
}

<*> SKIP : {
    " " |
    "\t" |
    "\n" |
    "\r" |
    "\f"
}

<DEFAULT> TOKEN : {
    <ASSIGN: "="> |
    <EQUAL: "=="> |
    <IF: "if"> |
    <INT: "int"> |
    <FOR: "for"> |
    <FLOAT: "float"> |
    <ELSE: "else"> |
    <WHILE: "while"> |
    <NUMBER: (["0"-"9"])*["."](["0"-"9"])+ | (["0"-"9"])+>
}

<DEFAULT> MORE : {
    <["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "_", "0"-"9"])*>
    { tmp_id = image.toString(); } : HANDLE_AMBIGUITY
}

<HANDLE_AMBIGUITY> TOKEN : {
    <AFF: "="> { matchedToken.image = tmp_id; } : GENERATE_ASSIGN
}

<GENERATE_ASSIGN> TOKEN : {
    "" { matchedToken.kind = ASSIGN; matchedToken.image = "="; } : DEFAULT
}

<HANDLE_AMBIGUITY> SPECIAL_TOKEN : {
    "==" : GENERATE_ID
}

<HANDLE_AMBIGUITY> TOKEN : {
    <ID: ""> {matchedToken.image = tmp_id; } : DEFAULT
}

<GENERATE_ID> TOKEN : {
    "" {matchedToken.kind = ID; matchedToken.image = tmp_id; } : GENERATE_EQUAL
}

<GENERATE_EQUAL> TOKEN : {
    "" { matchedToken.kind = EQUAL; matchedToken.image = "=="; } : DEFAULT
}

/** Root production. */
SimpleNode Function() : {}
{
    Type() <ID> "(" ArgList() ")" CompoundStmt() <EOF>
    {
        return jjtThis;
    }
}

void ArgList() : {}
{
    Arg() _ArgList()
}

void _ArgList() : {}
{
    "," Arg() _ArgList() | {}
}

void Arg() : {}
{
    Type() <ID>
}

void Declaration() : {}
{
    Type() IdentList() ";"
}

void Type() : {}
{
    <INT> | <FLOAT>
}

void IdentList() : {}
{
    <ID> _OrIdentList()
}

void _OrIdentList() : {}
{
    "," IdentList() | {}
}

void Stmt() : {}
{
    ForStmt() |
    WhileStmt() |
    Expr() ";" |
    IfStmt() |
    CompoundStmt() |
    Declaration() |
    ";"
}

void ForStmt() : {}
{
    <FOR> "(" Expr() ";" OptExpr() ";" OptExpr() ")" Stmt()
}

void OptExpr() : {}
{
    Expr() | {}
}

void WhileStmt() : {}
{
    <WHILE> "(" Expr() ")" Stmt()
}

void IfStmt() : {}
{
    <IF> "(" Expr() ")" Stmt() ElsePart()
}

void ElsePart() : {}
{
    <ELSE> Stmt() | {}
}

void CompoundStmt() : {}
{
    "{" StmtList() "}"
}

void StmtList() : {}
{
    _StmtList()
}

void _StmtList() : {}
{
    Stmt() _StmtList() | {}
}

void Expr() : {}
{
    <AFF> <ASSIGN> Expr() | Rvalue()
}

void Rvalue() : {}
{
    Mag() _Rvalue()
}

void _Rvalue() : {}
{
    Compare() Mag() _Rvalue() | {}
}

void Compare() : {}
{
    <EQUAL> | "<" | ">" | "<=" | ">=" | "!="
}

void Mag() : {}
{
    Term() _Mag()
}

void _Mag() : {}
{
    "+" Term() _Mag() | "-" Term() _Mag() | {}
}

void Term() : {}
{
    Factor() _Term()
}

void _Term() : {}
{
    "*" Factor() _Term() |
    "/" Factor() _Term() |
    {}
}

void Factor() : {}
{
    "(" Expr() ")" |
    "+" Expr() |
    "-" Expr() |
    <ID> |
    <NUMBER>
}
