/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parser.jj */
/*@egen*/PARSER_BEGIN(MiniC)

public class MiniC/*@bgen(jjtree)*/implements MiniCTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTMiniCState jjtree = new JJTMiniCState();

/*@egen*/

    static int ifLbl = 0;
    static int forLbl = 0;
    static int whileLbl = 0;
    static int cmpLbl = 0;
    static int i = 0;

    public static void main(String args[]) {
        MiniC parser = new MiniC(System.in);
        try {
            //SimpleNode n = parser.Z();
            //n.dump("");
            parser.Z();
            System.out.println("Thank you.");
        }
        catch (Exception e) {
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    static void genQuad(String opc, String src1, String src, String des) {
        System.out.printf("(%s %s %s %s)\n", opc, src1, src, des);
    }

    static void genLbl(String lbl) { 
        System.out.printf("%s: ", lbl);
    }
}

PARSER_END(MiniC)

/** Lexical analyzer **/

SKIP : {
    " " |
    "\t" |
    "\n" |
    "\r" |
    "\f"
}

TOKEN : {
    <IF: "if"> |
    <INT: "int"> |
    <FOR: "for"> |
    <FLOAT: "float"> |
    <ELSE: "else"> |
    <WHILE: "while"> |
    <ID: ["a"-"z", "A"-"Z", "_"](["a"-"z", "A"-"Z", "_", "0"-"9"])*> |
    <NUMBER: (["0"-"9"])*["."](["0"-"9"])+ | (["0"-"9"])+>
}

/** Root production. */

SimpleNode Z() : {/*@bgen(jjtree) Z */
  SimpleNode jjtn000 = new SimpleNode(JJTZ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Z */
    try {
/*@egen*/
    Function() <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        genQuad("HALT", "_", "_", "_");
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Function() : {/*@bgen(jjtree) Function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    Type() <ID> "(" ArgList() ")" CompoundStmt()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArgList() : {/*@bgen(jjtree) ArgList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgList */
    try {
/*@egen*/
    Arg() _ArgList()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void _ArgList() : {/*@bgen(jjtree) _ArgList */
  SimpleNode jjtn000 = new SimpleNode(JJT_ARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _ArgList */
    try {
/*@egen*/
    "," Arg() _ArgList() |/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Arg() : {/*@bgen(jjtree) Arg */
  SimpleNode jjtn000 = new SimpleNode(JJTARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arg */
    try {
/*@egen*/
    Type() <ID>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Declaration() : {/*@bgen(jjtree) Declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Declaration */
    try {
/*@egen*/
    Type() IdentList() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    <INT> | <FLOAT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IdentList() : {/*@bgen(jjtree) IdentList */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IdentList */
    try {
/*@egen*/
    <ID> _OrIdentList()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void _OrIdentList() : {/*@bgen(jjtree) _OrIdentList */
  SimpleNode jjtn000 = new SimpleNode(JJT_ORIDENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _OrIdentList */
    try {
/*@egen*/
    "," IdentList() |/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Stmt() : {/*@bgen(jjtree) Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmt */
    try {
/*@egen*/
    ForStmt() |
    WhileStmt() |
    Expr() ";" |
    IfStmt() |
    CompoundStmt() |
    Declaration() |
    ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ForStmt() : {/*@bgen(jjtree) ForStmt */
    SimpleNode jjtn000 = new SimpleNode(JJTFORSTMT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String tmpOptExpr;
    String lbl1, lbl2, lbl3, lbl4;
}
{/*@bgen(jjtree) ForStmt */
    try {
/*@egen*/
    <FOR>
    {
        forLbl++;
        lbl1 = String.format("FOR%d_LBL%d", forLbl, 1);
        lbl2 = String.format("FOR%d_LBL%d", forLbl, 2);
        lbl3 = String.format("FOR%d_LBL%d", forLbl, 3);
        lbl4 = String.format("FOR%d_LBL%d", forLbl, 4);
    }
    "(" Expr() ";"
    {
        genLbl(lbl1);
    }
    tmpOptExpr = OptExpr()
    {
        genQuad("CMP", tmpOptExpr, "0", "_");
        genQuad("JNE", "_", "_", lbl2);
        genQuad("JMP", "_", "_", lbl3);
        genLbl(lbl4);
    }
    ";" OptExpr()
    {
        genQuad("JMP", "_", "_", lbl1);
        genLbl(lbl2);
    }
    ")" Stmt()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        genQuad("JMP", "_", "_", lbl4);
        genLbl(lbl3);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String OptExpr() : {/*@bgen(jjtree) OptExpr */
    SimpleNode jjtn000 = new SimpleNode(JJTOPTEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String tmpExpr;
}
{/*@bgen(jjtree) OptExpr */
    try {
/*@egen*/
    tmpExpr = Expr()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return tmpExpr;
    } |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return "";
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void WhileStmt() : {/*@bgen(jjtree) WhileStmt */
    SimpleNode jjtn000 = new SimpleNode(JJTWHILESTMT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String lbl1, lbl2;
    String tmpExpr;
}
{/*@bgen(jjtree) WhileStmt */
    try {
/*@egen*/
    <WHILE>
    {
        whileLbl++;
        lbl1 = String.format("WHILE%d_LBL%d", whileLbl, 1);
        lbl2 = String.format("WHILE%d_LBL%d", whileLbl, 2);
        genLbl(lbl1);
    }
    "(" 
    tmpExpr = Expr()
    {
        genQuad("CMP", tmpExpr, "0", "_");
        genQuad("JE", "_", "_", lbl2);
    }
    ")" Stmt()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        genQuad("JMP", "_", "_", lbl1);
        genLbl(lbl2);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IfStmt() : {/*@bgen(jjtree) IfStmt */
    SimpleNode jjtn000 = new SimpleNode(JJTIFSTMT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String lbl1, lbl2;
    String tmpExpr;
}
{/*@bgen(jjtree) IfStmt */
    try {
/*@egen*/
    <IF>
    {
        ifLbl ++;
        lbl1 = String.format("IF%d_LBL%d", ifLbl, 1);
        lbl2 = String.format("IF%d_LBL%d", ifLbl, 2);
    }
    "("
    tmpExpr = Expr()
    {
        genQuad("CMP", tmpExpr, "0", "_");
        genQuad("JE", "_", "_", lbl1);

    }
    ")" Stmt()
    {
        genQuad("JMP", "_", "_", lbl2);
        genLbl(lbl1);
    }
    ElsePart()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        genLbl(lbl2);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ElsePart() : {/*@bgen(jjtree) ElsePart */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElsePart */
    try {
/*@egen*/
    <ELSE> Stmt() |/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void CompoundStmt() : {/*@bgen(jjtree) CompoundStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPOUNDSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompoundStmt */
    try {
/*@egen*/
    "{" StmtList() "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StmtList() : {/*@bgen(jjtree) StmtList */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StmtList */
    try {
/*@egen*/
    _StmtList()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void _StmtList() : {/*@bgen(jjtree) _StmtList */
  SimpleNode jjtn000 = new SimpleNode(JJT_STMTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _StmtList */
    try {
/*@egen*/
    Stmt() _StmtList() |/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Expr() : {/*@bgen(jjtree) Expr */
    SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token id;
    String tmpExpr, tmpRvalue;
}
{/*@bgen(jjtree) Expr */
    try {
/*@egen*/
    LOOKAHEAD(2)
    id = <ID>
    "="
    tmpExpr = Expr()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        genQuad("MOV", tmpExpr, "_", id.image);
        return tmpExpr;
    } |
    tmpRvalue = Rvalue()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return tmpRvalue;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Rvalue() : {/*@bgen(jjtree) Rvalue */
    SimpleNode jjtn000 = new SimpleNode(JJTRVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String tmpMag, tmp_Rvalue;
}
{/*@bgen(jjtree) Rvalue */
    try {
/*@egen*/
    tmpMag = Mag()
    tmp_Rvalue = _Rvalue(tmpMag)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return tmp_Rvalue;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String _Rvalue(String h) : {/*@bgen(jjtree) _Rvalue */
    SimpleNode jjtn000 = new SimpleNode(JJT_RVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String cmp, tmpMag;
    String lbl1, lbl2;
    String tmpVar;
    String tmp_Rvalue;
}
{/*@bgen(jjtree) _Rvalue */
    try {
/*@egen*/
    cmp = Compare()
    {
        cmpLbl++;
        lbl1 = String.format("CMP%d_LBL%d", cmpLbl, 1);
        lbl2 = String.format("CMP%d_LBL%d", cmpLbl, 2);
    }
    tmpMag = Mag()
    {
        i++;
        tmpVar = String.format("TMP_%d", i);
        genQuad("MOV", "0", "_", tmpVar);
        genQuad("CMP", h, tmpMag, "_");
        switch(cmp) {
            case "==":
                genQuad("JE", "_", "_", lbl1);
                break;
            case "!=":
                genQuad("JNE", "_", "_", lbl1);
                break;
            case "<":
                genQuad("JL", "_", "_", lbl1);
                break;
            case "<=":
                genQuad("JLE", "_", "_", lbl1);
                break;
            case ">":
                genQuad("JG", "_", "_", lbl1);
                break;
            case ">=":
                genQuad("JGE", "_", "_", lbl1);
                break;
            default: break;
        }
        genQuad("JMP", "_", "_", lbl2);
        genLbl(lbl1);
        genQuad("MOV", "1", "_", tmpVar);
        genLbl(lbl2);
    }
    tmp_Rvalue = _Rvalue(tmpVar)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return tmp_Rvalue;
    } |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return h;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Compare() : {/*@bgen(jjtree) Compare */
    SimpleNode jjtn000 = new SimpleNode(JJTCOMPARE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Compare */
    try {
/*@egen*/
    t = "=="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { return t.image; } |
    t = "<"/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { return t.image; } |
    t = ">"/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { return t.image; } |
    t = "<="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { return t.image; } |
    t = ">="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { return t.image; } |
    t = "!="/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { return t.image; }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

String Mag() : {/*@bgen(jjtree) Mag */
    SimpleNode jjtn000 = new SimpleNode(JJTMAG);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String tmpTerm, tmp_Mag;
}
{/*@bgen(jjtree) Mag */
    try {
/*@egen*/
    tmpTerm = Term()
    tmp_Mag = _Mag(tmpTerm)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return tmp_Mag;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String _Mag(String h) : {/*@bgen(jjtree) _Mag */
    SimpleNode jjtn000 = new SimpleNode(JJT_MAG);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String tmpTerm, tmp_Mag;
    String tmpVar; 
}
{/*@bgen(jjtree) _Mag */
    try {
/*@egen*/
    "+"
    tmpTerm = Term()
    {
        i++;
        tmpVar = String.format("TMP_%d", i);
        genQuad("ADD", h, tmpTerm, tmpVar);
    }
    tmp_Mag = _Mag(tmpVar)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return tmp_Mag;
    } |
    "-"
    tmpTerm = Term()
    {
        i++;
        tmpVar = String.format("TMP_%d", i);
        genQuad("SUB", h, tmpTerm, tmpVar);
    }
    tmp_Mag = _Mag(tmpVar)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return tmp_Mag;
    } |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return h;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Term() : {/*@bgen(jjtree) Term */
    SimpleNode jjtn000 = new SimpleNode(JJTTERM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String tmpFactor, tmp_Term;
}
{/*@bgen(jjtree) Term */
    try {
/*@egen*/
    tmpFactor = Factor()
    tmp_Term = _Term(tmpFactor)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return tmp_Term;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String _Term(String h) : {/*@bgen(jjtree) _Term */
    SimpleNode jjtn000 = new SimpleNode(JJT_TERM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String tmpFactor, tmp_Mag, tmp_Term;
    String tmpVar; 
}
{/*@bgen(jjtree) _Term */
    try {
/*@egen*/
    "*"
    tmpFactor = Factor()
    {
        i++;
        tmpVar = String.format("TMP_%d", i);
        genQuad("MUL", h, tmpFactor, tmpVar);
    }
    tmp_Term = _Term(tmpVar)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return tmp_Term;
    } |
    "/"
    tmpFactor = Factor()
    {
        i++;
        tmpVar = String.format("TMP_%d", i);
        genQuad("DIV", h, tmpFactor, tmpVar);
    }
    tmp_Term = _Term(tmpVar)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return tmp_Term;
    } |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return h;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String Factor() : {/*@bgen(jjtree) Factor */
    SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token id, number;
    String tmpExpr, tmpVar;
}
{/*@bgen(jjtree) Factor */
    try {
/*@egen*/
    "("
    tmpExpr =  Expr()
    ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return tmpExpr;
    } |
    "+"
    tmpExpr = Expr()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return tmpExpr;
    } |
    "-"
    tmpExpr = Expr()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        i++;
        tmpVar = String.format("TMP_%d", i);
        genQuad("NEG", tmpExpr, "_", tmpVar);
        return tmpVar;
    } |
    id = <ID>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return id.image;
    } |
    number = <NUMBER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return number.image;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
