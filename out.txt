(MOV 10 . x)
(MOV 15 . y)
(MOV .30 . z)
(MOV 0.5 . result)
(MOV 0 . i)
FOR1_LBL1: (MOV 0 . TMP_1)
(CMP i x .)
(JL . . CMP1_LBL1)
(JMP . . CMP1_LBL2)
CMP1_LBL1: (MOV 1 . TMP_1)
CMP1_LBL2: (CMP TMP_1 0 .)
(JNE . . FOR1_LBL2)
(JMP . . FOR1_LBL3)
FOR1_LBL4: (ADD i 1 TMP_2)
(MOV TMP_2 . i)
(JMP . . FOR1_LBL1)
FOR1_LBL2: (MUL i x TMP_3)
(ADD result TMP_3 TMP_4)
(MOV TMP_4 . result)
(MUL y y TMP_5)
(MOV TMP_5 . y)
(JMP . . FOR1_LBL4)
FOR1_LBL3: (MOV y . j)
WHILE1_LBL1: (MOV 0 . TMP_6)
(CMP j 0 .)
(JGE . . CMP2_LBL1)
(JMP . . CMP2_LBL2)
CMP2_LBL1: (MOV 1 . TMP_6)
CMP2_LBL2: (CMP TMP_6 0 .)
(JE . . WHILE1_LBL2)
(MUL result result TMP_7)
(MOV TMP_7 . result)
(ADD 2 x TMP_8)
(SUB j TMP_8 TMP_9)
(MOV TMP_9 . j)
(JMP . . WHILE1_LBL1)
WHILE1_LBL2: (MOV 0 . TMP_10)
(CMP result 425.6 .)
(JG . . CMP3_LBL1)
(JMP . . CMP3_LBL2)
CMP3_LBL1: (MOV 1 . TMP_10)
CMP3_LBL2: (CMP TMP_10 0 .)
(JE . . IF1_LBL1)
(NEG result . TMP_11)
(MOV TMP_11 . result)
(JMP . . IF1_LBL2)
IF1_LBL1: (DIV result z TMP_12)
(MOV TMP_12 . result)
IF1_LBL2: (HALT . . .)
