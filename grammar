Function -> Type identifier ( ArgList ) CompoundStmt

ArgList -> Type identifier | ArgList , Arg

Arg -> Type identifier

Declaration -> Type IdentList ;

Type -> int | float

IdentList -> identifier , IdentList | identifier

Stmt -> for ( Expr ; OptExpr ; OptExpr ) Stmt
| for ( Expr ; ; OptExpr ) Stmt
| for ( Expr ; OptExpr ; ) Stmt
| for ( Expr ; ; ) Stmt
| while ( Expr ) Stmt
| Expr ;
| if ( Expr ) Stmt ElsePart
| if ( Expr ) Stmt
| { StmtList }
| { }
| Type IdentList ;
| ;

OptExpr -> identifier = Expr
| Rvalue Compare Mag
| Mag + Term
| Mag - Term
| Term * Factor
| Term / Factor
| ( Expr )
| - Factor
| + Factor
| identifier
| number

ElsePart -> else Stmt

CompoundStmt -> { StmtList }
| { }

StmtList -> StmtList Stmt
| for ( Expr ; OptExpr ; OptExpr ) Stmt
| for ( Expr ; ; OptExpr ) Stmt
| for ( Expr ; OptExpr ; ) Stmt
| for ( Expr ; ; ) Stmt
| while ( Expr ) Stmt
| Expr ;
| if ( Expr ) Stmt ElsePart
| if ( Expr ) Stmt
| { StmtList }
| { }
| Type IdentList ;
| ;

Expr -> identifier = Expr
| Rvalue Compare Mag
| Mag + Term
| Mag - Term
| Term * Factor
| Term / Factor
| ( Expr )
| - Factor
| + Factor
| identifier
| number

Rvalue -> Rvalue Compare Mag
| Mag + Term
| Mag - Term
| Term * Factor
| Term / Factor
| ( Expr )
| - Factor
| + Factor
| identifier
| number

Compare -> == | < | > | <= | >= | !=

Mag -> Mag + Term
| Mag - Term
| Term * Factor
| Term / Factor
| ( Expr )
| - Factor
| + Factor
| identifier
| number

Term -> Term * Factor
| Term / Factor
| ( Expr )
| - Factor
| + Factor
| identifier
| number

Factor -> ( Expr ) | - Factor | + Factor | identifier | number
