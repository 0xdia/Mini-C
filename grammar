Function -> Type identifier ( ArgList ) CompoundStmt

ArgList -> Arg _ArgList

_ArgList -> , Arg _ArgList | ε

Arg -> Type identifier

Declaration -> Type IdentList ;

Type -> int | float

IdentList -> identifier _OrIdentList

_OrIdentList -> , IdentList | ε

Stmt -> ForStmt
| WhileStmt
| Expr ;
| IfStmt
| CompoundStmt
| Declaration
| ;

ForStmt -> 
        for ( Expr 
        { 
            for_lbl++;  
        } 
        ; 
        { 
            newLabel(FOR_for_lbl_LBL1);    
        } 
        OptExpr1 ;
        {
            OptExpr2.h = OptExpr1.v; 

            GenererQuad(CMP, OptExpr2.h, 0, );
            GenererQuad(JNE,,, FOR_for_lbl_LBL2); 

            GenererQuad(JMP,,, FOR_for_lbl_LBL3);  
            
            newLabel(FOR_lbl_LBL4); 
        } 
        OptExpr2 ) 
        { 
            GenererQuad(JMP,,, FOR_for_lbl_LBL1); 
            newLabel(FOR_for_lbl_LBL2); 
        } 
        Stmt 
        { 
            GenererQuad(JMP,,, FOR_for_lbl_LBL4);
            newLabel(FOR_for_lbl_LBL3); 
        }

OptExpr -> Expr { OptExpr.v = Expr.v; } | ε { OptExpr.v = null; }

WhileStmt -> 
            while ( 
            { 
                whl_lbl++;
                newLabel(WHL_whl_lbl_LIB1);
            } 
            Expr
            {
                GenererQuad(CMP, Expr.v, 0, );
                GenererQuad(JE,,, WHL_whl_lbl_LBL2);   
            } 
            ) Stmt
            {
                GenererQuad(JMP,,, WHL_whl_lbl_LBL1);
                newLabel(WHL_lbl_LBL2); 
            }

IfStmt -> 
        if ( 
        {
            if_lbl++;
        }
        Expr )
        {
            GenererQuad(CMP, Expr.v, 0, );
            GenererQuad(JE,,, IF_if_lbl_LBL1);
        }
        Stmt
        {
            GenererQuad(JMP,,, IF_if_lbl_LBL2);
            newLabel(IF_if_lbl_LBL1);
        }
        ElsePart
        {
            newLabel(IF_if_lbl_LBL2);
        }

ElsePart -> else Stmt | ε

CompoundStmt -> { StmtList }

StmtList -> _StmtList

_StmtList -> Stmt _StmtList | ε

Expr -> 
        identifier = Expr1 
        { 
            identifier.v = Expr1.v;
            Expr.v = identifier.v; 
            GenererQuad(MOV, Expr1.v,, identifier.v);
        } | 
        Rvalue
        {
            Expr.v = Rvalue.v;
        }

Rvalue -> Mag { _Rvalue.h = Mag.v } _Rvalue { Rvalue.v = _Rvalue.v }

_Rvalue -> 
        Compare 
        {
            cmp_lbl++;
            Mag.h = Compare.v;
        }
        Mag
        {
            i++;
            GenererQuad(MOV, 0, , TEMP_i);
            GenererQuad("CMP", _Rvalue.h, Mag.v, );
            
            if (Mag.h == "==")
                GenererQuad(JE, , , COMP_cmp_lbl_LBL1);
            else if (Mag.h == "<")
                GenererQuad(JL, , , COMP_cmp_lbl_LBL1);
            else if (Mag.h == ">")
                GenererQuad(JG, , , COMP_cmp_lbl_LBL1);
            else if (Mag.h == "<=")
                GenererQuad(JLE, , , COMP_cmp_lbl_LBL1);
            else if (Mag.h == ">=")
                GenererQuad(JGE, , , COMP_cmp_lbl_LBL1);
            else if (Mag.h == "!=")
                GenererQuad(JNE, , , COMP_cmp_lbl_LBL1);
            
            GenererQuad(MOV, 0, , TEMP_i);
            GenererQuad(JMP, , , COMP_cmp_lbl_LBL2);

            _Rvalue1.h = TEMP_i;

            newLabel(COMP_cmp_lbl_LBL1);
            GenererQuad(MOV, 1, , TEMP_i);
            newLabel(COMP_cmp_lbl_LBL2);
        }
        _Rvalue1
        {
            _Rvalue.v = _Rvalue1.v /* = _Rvalue1.h Compare.v _Rvalue1.v */;
        } |
        ε { _Rvalue.v = _Rvalue.h; }

Compare -> 
        == { Compare.v = "=="; } | 
        < { Compare.v = "<"; } | 
        > { Compare.v = ">"; } | 
        <= { Compare.v = "<="; } | 
        >= { Compare.v = ">="; } | 
        != { Compare.v = "!="; }

Mag -> Term { _Mag.h = Term.v; } _Mag { Mag.v = _Mag.v; }

_Mag -> 
        + Term 
        {
            _Mag1.h = Term.v;
        }
        _Mag1
        {
            _Mag.v = _Mag1.h + _Mag1.v;
            i++;
            GenererQuad(ADD, _Mag1.v, _Mag1.h, TEMP_i);
        } | 
        - Term 
        {
            _Mag1.h = Term.v;
        }
        _Mag1
        {
            _Mag.v = _Mag1.h - _Mag1.v;
            i++;
            GenererQuad(SUB, _Mag.h, _Mag.v, TEMP_i);
        } | 
        ε { _Mag.v = _Mag.h; }

Term -> Factor { _Term.h = Factor.v; } _Term { Term.v = _Term.v; }

_Term -> 
        * Factor 
        {
            _Term1.h = Factor.v * _Term.h;
        }
        _Term1
        {
            _Term.v = _Term1.h * _Term1.v; 
            GenererQuad(MUL, _Term1.v, _Term1.h, TEMP_i);
            i++;
        } |
        / Factor
        {
            _Term1.h = Factor.v;
        }
        _Term1
        {
            _Term.v = _Term1.h / _Term1.v; 
            GenererQuad(DIV, _Term1.v, _Term1.h, TEMP_i);
            i++;
        } | 
        ε { _Term.v = _Term.h; }

Factor -> ( Expr ) { Factor.v = Expr.v }

Factor -> 
        - Factor 
        { 
            i++;
            GenererQuad(NEG, Factor.v,, TEMP_i); 
            Factor.v = - Factor.v;
        }

Factor -> + Factor { Factor.v = Factor.v; }

Factor -> identifier { Factor.v = identifier.v; }

Factor -> number { Factor.v = number.v; }
