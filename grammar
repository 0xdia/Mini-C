Function -> Type identifier ( ArgList ) CompoundStmt

ArgList -> Type identifier _ArgList

_ArgList -> , Arg _ArgList | ε

Arg -> Type identifier

Declaration -> Type IdentList ;

Type -> int | float

IdentList -> identifier _IdentList

_IdentList -> , IdentList | ε

Stmt -> for ( Expr ; _ForStmt
| while ( Expr ) Stmt
| Expr ;
| if ( Expr ) Stmt _IfStmt
| { _CurStmt
| Type IdentList ;
| ;

_CurStmt -> StmtList } | }

_IfStmt -> ElsePart | ε

_ForStmt -> OptExpr ; _OptExprForStmt | ; _SemicForStmt

_OptExprForStmt -> OptExpr ) Stmt | ) Stmt

_SemicForStmt -> OptExpr ) Stmt | ) Stmt

OptExpr -> identifier _Affect
| Rvalue Compare Mag
| Mag _MagExpr
| Term _TermExpr
| ( Expr )
| - Factor
| + Factor
| number

_Affect -> = Expr | ε

_MagExpr -> + Term | - Term 

_TermExpr -> * Factor | / Factor

ElsePart -> else Stmt

CompoundStmt -> { _CurStmt

StmtList -> StmtList Stmt
| for ( Expr ; _ForStmt
| while ( Expr ) Stmt
| Expr ;
| if ( Expr ) Stmt _IfStmt
| { _CurStmt
| Type IdentList ;
| ;

Expr -> identifier _Affect
| Rvalue Compare Mag
| Mag _MagExpr
| Term _TermExpr
| ( Expr )
| - Factor
| + Factor
| number

Rvalue -> Mag _MagRvalue
| Term _TermRvalue
| ( Expr ) _Rvalue
| - Factor _Rvalue
| + Factor _Rvalue
| identifier _Rvalue
| number _Rvalue

_MagRvalue -> + Term _Rvalue | - Term _Rvalue

_TermRvalue -> * Factor _Rvalue | / Factor _Rvalue

_Rvalue -> Compare Mag _Rvalue | ε

Compare -> == | < _OrEqual | > _OrEqual | !=

_OrEqual -> = | ε

Mag -> Term _TermMag
| ( Expr ) _Mag
| - Factor _Mag
| + Factor _Mag
| identifier _Mag
| number _Mag

_TermMag -> * Factor _Mag | / Factor _Mag

_Mag -> + Term _Mag | - Term _Mag | ε

Term -> ( Expr ) _Term
| - Factor _Term
| + Factor _Term
| identifier _Term
| number _Term

_Term -> * Factor _Term | / Factor _Term | ε

Factor -> ( Expr ) | - Factor | + Factor | identifier | number
