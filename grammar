Function -> Type identifier ( ArgList ) CompoundStmt

ArgList -> Type identifier _ArgList

_ArgList -> , Arg _ArgList | ε

Arg -> Type identifier

Declaration -> Type IdentList ;

Type -> int | float

IdentList -> identifier , IdentList | identifier

Stmt -> for ( Expr ; OptExpr ; OptExpr ) Stmt
| for ( Expr ; ; OptExpr ) Stmt
| for ( Expr ; OptExpr ; ) Stmt
| for ( Expr ; ; ) Stmt
| while ( Expr ) Stmt
| Expr ;
| if ( Expr ) Stmt ElsePart
| if ( Expr ) Stmt
| { StmtList }
| { }
| Type IdentList ;
| ;

OptExpr -> identifier = Expr
| Rvalue Compare Mag
| Mag + Term
| Mag - Term
| Term * Factor
| Term / Factor
| ( Expr )
| - Factor
| + Factor
| identifier
| number

ElsePart -> else Stmt

CompoundStmt -> { StmtList }
| { }

StmtList -> StmtList Stmt
| for ( Expr ; OptExpr ; OptExpr ) Stmt
| for ( Expr ; ; OptExpr ) Stmt
| for ( Expr ; OptExpr ; ) Stmt
| for ( Expr ; ; ) Stmt
| while ( Expr ) Stmt
| Expr ;
| if ( Expr ) Stmt ElsePart
| if ( Expr ) Stmt
| { StmtList }
| { }
| Type IdentList ;
| ;

Expr -> identifier = Expr
| Rvalue Compare Mag
| Mag + Term
| Mag - Term
| Term * Factor
| Term / Factor
| ( Expr )
| - Factor
| + Factor
| identifier
| number

Rvalue -> Mag + Term _Rvalue
| Mag - Term _Rvalue
| Term * Factor _Rvalue
| Term / Factor _Rvalue
| ( Expr ) _Rvalue
| - Factor _Rvalue
| + Factor _Rvalue
| identifier _Rvalue
| number _Rvalue

_Rvalue -> Compare Mag _Rvalue | ε

Compare -> == | < | > | <= | >= | !=

Mag -> Term * Factor _Mag
| Term / Factor _Mag
| ( Expr ) _Mag
| - Factor _Mag
| + Factor _Mag
| identifier _Mag
| number _Mag

_Mag -> + Term _Mag | - Term _Mag | ε

Term -> ( Expr ) _Term
| - Factor _Term
| + Factor _Term
| identifier _Term
| number _Term

_Term -> * Factor _Term | / Factor _Term | ε

Factor -> ( Expr ) | - Factor | + Factor | identifier | number
