/* Generated By:JavaCC: Do not edit this line. MiniC.java */
import java.io.*;

public class MiniC implements MiniCConstants {

    private static final String EMPTY_ARG = ".";

    static int ifLbl = 0;
    static int forLbl = 0;
    static int whileLbl = 0;
    static int cmpLbl = 0;
    static int i = 0;

    static PrintWriter out;

    public static void main(String args[]) {
        if (args.length < 1) {
            System.out.println("MiniC: erreur fatale: pas de fichiers en entr\u00e9e");
            System.exit(1);
        }
        FileInputStream inputFile = null;
        try {
            inputFile = new FileInputStream(args[0]);
        }
        catch (FileNotFoundException e) {
            System.out.printf("MiniC: erreur fatale: %s: ce fichier n'existe pas\u005cn", args[0]);
            System.exit(1);
        }
        String outFileName = "out.txt";
        if (args.length > 1) {
            outFileName = args[1];
        }
        MiniC parser = new MiniC(inputFile);
        try {
            out = new PrintWriter(new FileWriter(outFileName));
            parser.Z();
            System.out.println("compilation termin\u00e9e.");
            inputFile.close();
            out.close();
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    static void genQuad(String opc, String src1, String src, String des) {
        out.printf("(%s %s %s %s)\u005cn", opc, src1, src, des);
    }

    static void genLbl(String lbl) {
        out.printf("%s: ", lbl);
    }

/** Root production. */
  static final public void Z() throws ParseException {
    Function();
    jj_consume_token(0);
        genQuad("HALT", EMPTY_ARG, EMPTY_ARG, EMPTY_ARG);
  }

  static final public void Function() throws ParseException {
    Type();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(28);
    ArgList();
    jj_consume_token(29);
    CompoundStmt();
  }

  static final public void ArgList() throws ParseException {
    Arg();
    _ArgList();
  }

  static final public void _ArgList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      jj_consume_token(30);
      Arg();
      _ArgList();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  static final public void Arg() throws ParseException {
    Type();
    jj_consume_token(IDENTIFIER);
  }

  static final public void Declaration() throws ParseException {
    Type();
    IdentList();
    jj_consume_token(31);
  }

  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IdentList() throws ParseException {
    jj_consume_token(IDENTIFIER);
    _OrIdentList();
  }

  static final public void _OrIdentList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      jj_consume_token(30);
      IdentList();
      break;
    default:
      jj_la1[2] = jj_gen;

    }
  }

  static final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      ForStmt();
      break;
    case WHILE:
      WhileStmt();
      break;
    case NUMBER:
    case ASSIGN_IDENTIFIER:
    case IDENTIFIER:
    case 28:
    case 34:
    case 35:
      Expr();
      jj_consume_token(31);
      break;
    case IF:
      IfStmt();
      break;
    case 32:
      CompoundStmt();
      break;
    case INT:
    case FLOAT:
      Declaration();
      break;
    case 31:
      jj_consume_token(31);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ForStmt() throws ParseException {
    String tmpOptExpr;
    String lbl1, lbl2, lbl3, lbl4;
    jj_consume_token(FOR);
        forLbl++;
        lbl1 = String.format("FOR%d_LBL%d", forLbl, 1);
        lbl2 = String.format("FOR%d_LBL%d", forLbl, 2);
        lbl3 = String.format("FOR%d_LBL%d", forLbl, 3);
        lbl4 = String.format("FOR%d_LBL%d", forLbl, 4);
    jj_consume_token(28);
    Expr();
    jj_consume_token(31);
        genLbl(lbl1);
    tmpOptExpr = OptExpr();
        genQuad("CMP", tmpOptExpr, "0", EMPTY_ARG);
        genQuad("JNE", EMPTY_ARG, EMPTY_ARG, lbl2);
        genQuad("JMP", EMPTY_ARG, EMPTY_ARG, lbl3);
        genLbl(lbl4);
    jj_consume_token(31);
    OptExpr();
        genQuad("JMP", EMPTY_ARG, EMPTY_ARG, lbl1);
        genLbl(lbl2);
    jj_consume_token(29);
    Stmt();
        genQuad("JMP", EMPTY_ARG, EMPTY_ARG, lbl4);
        genLbl(lbl3);
  }

  static final public String OptExpr() throws ParseException {
    String tmpExpr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case ASSIGN_IDENTIFIER:
    case IDENTIFIER:
    case 28:
    case 34:
    case 35:
      tmpExpr = Expr();
        {if (true) return tmpExpr;}
      break;
    default:
      jj_la1[4] = jj_gen;
        {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  static final public void WhileStmt() throws ParseException {
    String lbl1, lbl2;
    String tmpExpr;
    jj_consume_token(WHILE);
        whileLbl++;
        lbl1 = String.format("WHILE%d_LBL%d", whileLbl, 1);
        lbl2 = String.format("WHILE%d_LBL%d", whileLbl, 2);
        genLbl(lbl1);
    jj_consume_token(28);
    tmpExpr = Expr();
        genQuad("CMP", tmpExpr, "0", EMPTY_ARG);
        genQuad("JE", EMPTY_ARG, EMPTY_ARG, lbl2);
    jj_consume_token(29);
    Stmt();
        genQuad("JMP", EMPTY_ARG, EMPTY_ARG, lbl1);
        genLbl(lbl2);
  }

  static final public void IfStmt() throws ParseException {
    String lbl1, lbl2;
    String tmpExpr;
    jj_consume_token(IF);
        ifLbl ++;
        lbl1 = String.format("IF%d_LBL%d", ifLbl, 1);
        lbl2 = String.format("IF%d_LBL%d", ifLbl, 2);
    jj_consume_token(28);
    tmpExpr = Expr();
        genQuad("CMP", tmpExpr, "0", EMPTY_ARG);
        genQuad("JE", EMPTY_ARG, EMPTY_ARG, lbl1);
    jj_consume_token(29);
    Stmt();
        genQuad("JMP", EMPTY_ARG, EMPTY_ARG, lbl2);
        genLbl(lbl1);
    ElsePart();
        genLbl(lbl2);
  }

  static final public void ElsePart() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Stmt();
      break;
    default:
      jj_la1[5] = jj_gen;

    }
  }

  static final public void CompoundStmt() throws ParseException {
    jj_consume_token(32);
    StmtList();
    jj_consume_token(33);
  }

  static final public void StmtList() throws ParseException {
    _StmtList();
  }

  static final public void _StmtList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case INT:
    case FOR:
    case FLOAT:
    case WHILE:
    case NUMBER:
    case ASSIGN_IDENTIFIER:
    case IDENTIFIER:
    case 28:
    case 31:
    case 32:
    case 34:
    case 35:
      Stmt();
      _StmtList();
      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

  static final public String Expr() throws ParseException {
    Token id;
    String tmpExpr, tmpRvalue;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN_IDENTIFIER:
      id = jj_consume_token(ASSIGN_IDENTIFIER);
      jj_consume_token(ASSIGN);
      tmpExpr = Expr();
        genQuad("MOV", tmpExpr, EMPTY_ARG, id.image);
        {if (true) return tmpExpr;}
      break;
    case NUMBER:
    case IDENTIFIER:
    case 28:
    case 34:
    case 35:
      tmpRvalue = Rvalue();
        {if (true) return tmpRvalue;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Rvalue() throws ParseException {
    String tmpMag, tmp_Rvalue;
    tmpMag = Mag();
    tmp_Rvalue = _Rvalue(tmpMag);
        {if (true) return tmp_Rvalue;}
    throw new Error("Missing return statement in function");
  }

  static final public String _Rvalue(String h) throws ParseException {
    String cmp, tmpMag;
    String lbl1, lbl2;
    String tmpVar;
    String tmp_Rvalue;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
    case GREATER:
    case LESSEQ:
    case GREATEREQ:
    case NEQUAL:
    case EQUAL:
      cmp = Compare();
        cmpLbl++;
        lbl1 = String.format("CMP%d_LBL%d", cmpLbl, 1);
        lbl2 = String.format("CMP%d_LBL%d", cmpLbl, 2);
      tmpMag = Mag();
        i++;
        tmpVar = String.format("TMP_%d", i);
        genQuad("MOV", "0", EMPTY_ARG, tmpVar);
        genQuad("CMP", h, tmpMag, EMPTY_ARG);
        switch(cmp) {
            case "==":
                genQuad("JE", EMPTY_ARG, EMPTY_ARG, lbl1);
                break;
            case "!=":
                genQuad("JNE", EMPTY_ARG, EMPTY_ARG, lbl1);
                break;
            case "<":
                genQuad("JL", EMPTY_ARG, EMPTY_ARG, lbl1);
                break;
            case "<=":
                genQuad("JLE", EMPTY_ARG, EMPTY_ARG, lbl1);
                break;
            case ">":
                genQuad("JG", EMPTY_ARG, EMPTY_ARG, lbl1);
                break;
            case ">=":
                genQuad("JGE", EMPTY_ARG, EMPTY_ARG, lbl1);
                break;
            default: break;
        }
        genQuad("JMP", EMPTY_ARG, EMPTY_ARG, lbl2);
        genLbl(lbl1);
        genQuad("MOV", "1", EMPTY_ARG, tmpVar);
        genLbl(lbl2);
      tmp_Rvalue = _Rvalue(tmpVar);
        {if (true) return tmp_Rvalue;}
      break;
    default:
      jj_la1[8] = jj_gen;
        {if (true) return h;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Compare() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t = jj_consume_token(EQUAL);
                  {if (true) return t.image;}
      break;
    case LESS:
      t = jj_consume_token(LESS);
                 {if (true) return t.image;}
      break;
    case GREATER:
      t = jj_consume_token(GREATER);
                    {if (true) return t.image;}
      break;
    case LESSEQ:
      t = jj_consume_token(LESSEQ);
                   {if (true) return t.image;}
      break;
    case GREATEREQ:
      t = jj_consume_token(GREATEREQ);
                      {if (true) return t.image;}
      break;
    case NEQUAL:
      t = jj_consume_token(NEQUAL);
                   {if (true) return t.image;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Mag() throws ParseException {
    String tmpTerm, tmp_Mag;
    tmpTerm = Term();
    tmp_Mag = _Mag(tmpTerm);
        {if (true) return tmp_Mag;}
    throw new Error("Missing return statement in function");
  }

  static final public String _Mag(String h) throws ParseException {
    String tmpTerm, tmp_Mag;
    String tmpVar;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
      tmpTerm = Term();
        i++;
        tmpVar = String.format("TMP_%d", i);
        genQuad("ADD", h, tmpTerm, tmpVar);
      tmp_Mag = _Mag(tmpVar);
        {if (true) return tmp_Mag;}
      break;
    case 35:
      jj_consume_token(35);
      tmpTerm = Term();
        i++;
        tmpVar = String.format("TMP_%d", i);
        genQuad("SUB", h, tmpTerm, tmpVar);
      tmp_Mag = _Mag(tmpVar);
        {if (true) return tmp_Mag;}
      break;
    default:
      jj_la1[10] = jj_gen;
        {if (true) return h;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Term() throws ParseException {
    String tmpFactor, tmp_Term;
    tmpFactor = Factor();
    tmp_Term = _Term(tmpFactor);
        {if (true) return tmp_Term;}
    throw new Error("Missing return statement in function");
  }

  static final public String _Term(String h) throws ParseException {
    String tmpFactor, tmp_Mag, tmp_Term;
    String tmpVar;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
      jj_consume_token(36);
      tmpFactor = Factor();
        i++;
        tmpVar = String.format("TMP_%d", i);
        genQuad("MUL", h, tmpFactor, tmpVar);
      tmp_Term = _Term(tmpVar);
        {if (true) return tmp_Term;}
      break;
    case 37:
      jj_consume_token(37);
      tmpFactor = Factor();
        i++;
        tmpVar = String.format("TMP_%d", i);
        genQuad("DIV", h, tmpFactor, tmpVar);
      tmp_Term = _Term(tmpVar);
        {if (true) return tmp_Term;}
      break;
    default:
      jj_la1[11] = jj_gen;
        {if (true) return h;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Factor() throws ParseException {
    Token id, number;
    String tmpExpr, tmpFactor, tmpVar;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      jj_consume_token(28);
      tmpExpr = Expr();
      jj_consume_token(29);
        {if (true) return tmpExpr;}
      break;
    case 34:
      jj_consume_token(34);
      tmpFactor = Factor();
        {if (true) return tmpFactor;}
      break;
    case 35:
      jj_consume_token(35);
      tmpFactor = Factor();
        i++;
        tmpVar = String.format("TMP_%d", i);
        genQuad("NEG", tmpFactor, EMPTY_ARG, tmpVar);
        {if (true) return tmpVar;}
      break;
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
        {if (true) return id.image;}
      break;
    case NUMBER:
      number = jj_consume_token(NUMBER);
        {if (true) return number.image;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000000,0x28000,0x40000000,0x915bc000,0x11500000,0x40000,0x915bc000,0x11500000,0x3f00,0x3f00,0x0,0x0,0x11100000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0xd,0xc,0x0,0xd,0xc,0x0,0x0,0xc,0x30,0xc,};
   }

  /** Constructor with InputStream. */
  public MiniC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiniC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniC(MiniCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
